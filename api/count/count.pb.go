// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/count/count.proto

package countpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnimeIdReq struct {
	AnimeId              int64    `protobuf:"varint,1,opt,name=animeId,proto3" json:"animeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnimeIdReq) Reset()         { *m = AnimeIdReq{} }
func (m *AnimeIdReq) String() string { return proto.CompactTextString(m) }
func (*AnimeIdReq) ProtoMessage()    {}
func (*AnimeIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_625d548409ea6fce, []int{0}
}

func (m *AnimeIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnimeIdReq.Unmarshal(m, b)
}
func (m *AnimeIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnimeIdReq.Marshal(b, m, deterministic)
}
func (m *AnimeIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnimeIdReq.Merge(m, src)
}
func (m *AnimeIdReq) XXX_Size() int {
	return xxx_messageInfo_AnimeIdReq.Size(m)
}
func (m *AnimeIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnimeIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnimeIdReq proto.InternalMessageInfo

func (m *AnimeIdReq) GetAnimeId() int64 {
	if m != nil {
		return m.AnimeId
	}
	return 0
}

type AnimeIdsReq struct {
	AnimeId              []int64  `protobuf:"varint,1,rep,packed,name=animeId,proto3" json:"animeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnimeIdsReq) Reset()         { *m = AnimeIdsReq{} }
func (m *AnimeIdsReq) String() string { return proto.CompactTextString(m) }
func (*AnimeIdsReq) ProtoMessage()    {}
func (*AnimeIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_625d548409ea6fce, []int{1}
}

func (m *AnimeIdsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnimeIdsReq.Unmarshal(m, b)
}
func (m *AnimeIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnimeIdsReq.Marshal(b, m, deterministic)
}
func (m *AnimeIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnimeIdsReq.Merge(m, src)
}
func (m *AnimeIdsReq) XXX_Size() int {
	return xxx_messageInfo_AnimeIdsReq.Size(m)
}
func (m *AnimeIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnimeIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnimeIdsReq proto.InternalMessageInfo

func (m *AnimeIdsReq) GetAnimeId() []int64 {
	if m != nil {
		return m.AnimeId
	}
	return nil
}

type ViewCountRes struct {
	ViewCounts           []*CountRes `protobuf:"bytes,1,rep,name=viewCounts,proto3" json:"viewCounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ViewCountRes) Reset()         { *m = ViewCountRes{} }
func (m *ViewCountRes) String() string { return proto.CompactTextString(m) }
func (*ViewCountRes) ProtoMessage()    {}
func (*ViewCountRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_625d548409ea6fce, []int{2}
}

func (m *ViewCountRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewCountRes.Unmarshal(m, b)
}
func (m *ViewCountRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewCountRes.Marshal(b, m, deterministic)
}
func (m *ViewCountRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewCountRes.Merge(m, src)
}
func (m *ViewCountRes) XXX_Size() int {
	return xxx_messageInfo_ViewCountRes.Size(m)
}
func (m *ViewCountRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewCountRes.DiscardUnknown(m)
}

var xxx_messageInfo_ViewCountRes proto.InternalMessageInfo

func (m *ViewCountRes) GetViewCounts() []*CountRes {
	if m != nil {
		return m.ViewCounts
	}
	return nil
}

type CountRes struct {
	AnimeId              int64    `protobuf:"varint,1,opt,name=animeId,proto3" json:"animeId,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRes) Reset()         { *m = CountRes{} }
func (m *CountRes) String() string { return proto.CompactTextString(m) }
func (*CountRes) ProtoMessage()    {}
func (*CountRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_625d548409ea6fce, []int{3}
}

func (m *CountRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRes.Unmarshal(m, b)
}
func (m *CountRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRes.Marshal(b, m, deterministic)
}
func (m *CountRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRes.Merge(m, src)
}
func (m *CountRes) XXX_Size() int {
	return xxx_messageInfo_CountRes.Size(m)
}
func (m *CountRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRes.DiscardUnknown(m)
}

var xxx_messageInfo_CountRes proto.InternalMessageInfo

func (m *CountRes) GetAnimeId() int64 {
	if m != nil {
		return m.AnimeId
	}
	return 0
}

func (m *CountRes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AnimeCountRes struct {
	AnimeId              int64    `protobuf:"varint,1,opt,name=animeId,proto3" json:"animeId,omitempty"`
	LikeCount            int64    `protobuf:"varint,2,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	CollectCount         int64    `protobuf:"varint,3,opt,name=collectCount,proto3" json:"collectCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnimeCountRes) Reset()         { *m = AnimeCountRes{} }
func (m *AnimeCountRes) String() string { return proto.CompactTextString(m) }
func (*AnimeCountRes) ProtoMessage()    {}
func (*AnimeCountRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_625d548409ea6fce, []int{4}
}

func (m *AnimeCountRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnimeCountRes.Unmarshal(m, b)
}
func (m *AnimeCountRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnimeCountRes.Marshal(b, m, deterministic)
}
func (m *AnimeCountRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnimeCountRes.Merge(m, src)
}
func (m *AnimeCountRes) XXX_Size() int {
	return xxx_messageInfo_AnimeCountRes.Size(m)
}
func (m *AnimeCountRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AnimeCountRes.DiscardUnknown(m)
}

var xxx_messageInfo_AnimeCountRes proto.InternalMessageInfo

func (m *AnimeCountRes) GetAnimeId() int64 {
	if m != nil {
		return m.AnimeId
	}
	return 0
}

func (m *AnimeCountRes) GetLikeCount() int64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *AnimeCountRes) GetCollectCount() int64 {
	if m != nil {
		return m.CollectCount
	}
	return 0
}

func init() {
	proto.RegisterType((*AnimeIdReq)(nil), "AnimeIdReq")
	proto.RegisterType((*AnimeIdsReq)(nil), "AnimeIdsReq")
	proto.RegisterType((*ViewCountRes)(nil), "ViewCountRes")
	proto.RegisterType((*CountRes)(nil), "CountRes")
	proto.RegisterType((*AnimeCountRes)(nil), "AnimeCountRes")
}

func init() { proto.RegisterFile("api/count/count.proto", fileDescriptor_625d548409ea6fce) }

var fileDescriptor_625d548409ea6fce = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x13, 0x83, 0x7f, 0x3a, 0xd9, 0x78, 0x58, 0x54, 0x42, 0xf4, 0x20, 0x7b, 0xf0, 0xcf,
	0xc1, 0x09, 0x54, 0x10, 0xd4, 0x53, 0x15, 0x29, 0x5e, 0x23, 0x78, 0xf0, 0xd6, 0x24, 0x63, 0x59,
	0x9a, 0x76, 0x63, 0xb3, 0xad, 0xf8, 0x81, 0xfc, 0x9e, 0xd2, 0xdd, 0xa6, 0x49, 0x91, 0x42, 0x2f,
	0x21, 0x6f, 0xe6, 0x97, 0x99, 0x97, 0x37, 0x70, 0x3c, 0x28, 0x65, 0x9c, 0xa9, 0xd9, 0x44, 0xdb,
	0x27, 0x96, 0x53, 0xa5, 0x55, 0x74, 0x3a, 0x54, 0x6a, 0x58, 0x50, 0x6c, 0x54, 0x3a, 0xfb, 0x8c,
	0x69, 0x5c, 0xea, 0x1f, 0xdb, 0x14, 0x17, 0x00, 0xbd, 0x89, 0x1c, 0xd3, 0x6b, 0x9e, 0xd0, 0x17,
	0x0f, 0x61, 0x7f, 0x60, 0x55, 0xe8, 0x9e, 0xbb, 0x57, 0x5e, 0x52, 0x4b, 0x71, 0x09, 0xfe, 0x92,
	0xab, 0xfe, 0x81, 0x5e, 0x1b, 0xbc, 0x07, 0xf6, 0x2e, 0xe9, 0xfb, 0x79, 0x61, 0x20, 0xa1, 0x8a,
	0x5f, 0x03, 0xcc, 0x6b, 0x5d, 0x19, 0xd8, 0xef, 0x76, 0xb0, 0x6e, 0x27, 0xad, 0xa6, 0x78, 0x80,
	0x83, 0xd5, 0x67, 0x1b, 0x9d, 0xf0, 0x23, 0xd8, 0x35, 0x7f, 0x17, 0xee, 0x98, 0xba, 0x15, 0x62,
	0x04, 0x81, 0xf1, 0xb7, 0xc5, 0x80, 0x33, 0xe8, 0x14, 0x72, 0x64, 0xc9, 0xe5, 0x90, 0xa6, 0xc0,
	0x05, 0xb0, 0x4c, 0x15, 0x05, 0x65, 0xda, 0x02, 0x9e, 0x01, 0xd6, 0x6a, 0xdd, 0x5f, 0x17, 0x98,
	0x79, 0x7b, 0xa3, 0xe9, 0x5c, 0x66, 0xc4, 0xef, 0x20, 0xe8, 0xe5, 0x79, 0x63, 0x80, 0xfb, 0xd8,
	0xa4, 0x1a, 0x9d, 0xa0, 0xbd, 0x00, 0xd6, 0x17, 0xc0, 0x97, 0xc5, 0x05, 0x84, 0xc3, 0x6f, 0x80,
	0xf5, 0x49, 0xaf, 0xf2, 0xe2, 0x0c, 0x5b, 0x21, 0x47, 0x01, 0xb6, 0x93, 0x14, 0x0e, 0x47, 0x08,
	0xfa, 0xa4, 0x37, 0xad, 0x39, 0xc4, 0xb5, 0x04, 0x84, 0xf3, 0xc4, 0x3e, 0x00, 0xe3, 0x47, 0x13,
	0x50, 0x99, 0xa6, 0x7b, 0x66, 0xfd, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x81, 0xf1,
	0x82, 0x27, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CountServiceClient is the client API for CountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountServiceClient interface {
	AddAnimeCount(ctx context.Context, in *AnimeIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetViewCount(ctx context.Context, in *AnimeIdsReq, opts ...grpc.CallOption) (*ViewCountRes, error)
	GetAnimeCount(ctx context.Context, in *AnimeIdReq, opts ...grpc.CallOption) (*AnimeCountRes, error)
}

type countServiceClient struct {
	cc *grpc.ClientConn
}

func NewCountServiceClient(cc *grpc.ClientConn) CountServiceClient {
	return &countServiceClient{cc}
}

func (c *countServiceClient) AddAnimeCount(ctx context.Context, in *AnimeIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CountService/AddAnimeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countServiceClient) GetViewCount(ctx context.Context, in *AnimeIdsReq, opts ...grpc.CallOption) (*ViewCountRes, error) {
	out := new(ViewCountRes)
	err := c.cc.Invoke(ctx, "/CountService/GetViewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countServiceClient) GetAnimeCount(ctx context.Context, in *AnimeIdReq, opts ...grpc.CallOption) (*AnimeCountRes, error) {
	out := new(AnimeCountRes)
	err := c.cc.Invoke(ctx, "/CountService/GetAnimeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountServiceServer is the server API for CountService service.
type CountServiceServer interface {
	AddAnimeCount(context.Context, *AnimeIdReq) (*emptypb.Empty, error)
	GetViewCount(context.Context, *AnimeIdsReq) (*ViewCountRes, error)
	GetAnimeCount(context.Context, *AnimeIdReq) (*AnimeCountRes, error)
}

func RegisterCountServiceServer(s *grpc.Server, srv CountServiceServer) {
	s.RegisterService(&_CountService_serviceDesc, srv)
}

func _CountService_AddAnimeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).AddAnimeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CountService/AddAnimeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).AddAnimeCount(ctx, req.(*AnimeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountService_GetViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).GetViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CountService/GetViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).GetViewCount(ctx, req.(*AnimeIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountService_GetAnimeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).GetAnimeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CountService/GetAnimeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).GetAnimeCount(ctx, req.(*AnimeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CountService",
	HandlerType: (*CountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnimeCount",
			Handler:    _CountService_AddAnimeCount_Handler,
		},
		{
			MethodName: "GetViewCount",
			Handler:    _CountService_GetViewCount_Handler,
		},
		{
			MethodName: "GetAnimeCount",
			Handler:    _CountService_GetAnimeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/count/count.proto",
}
