syntax = "proto3";

option go_package = "./;animepb";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
//import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service AnimeService {
  rpc AddCategory (AddCategoryReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/animeapp/category"
      body: "*"
    };
  };

  rpc CategoryList (google.protobuf.Empty) returns (CategoryListRes) {
    option (google.api.http) = {
      get: "/animeapp/category"
    };
  };

  rpc AddAnime (AddAnimeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/animeapp/anime"
      body: "*"
    };
  };

  rpc AddVideo (AddVideoReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/animeapp/video"
      body: "*"
    };
  };

  rpc GetAnimeList (GetAnimeListReq) returns (AnimeListRes) {
    option (google.api.http) = {
      get: "/animeapp/anime/list"
    };
  };

  rpc GetAnimeInfo (AnimeInfoReq) returns (AnimeInfoRes) {
    option (google.api.http) = {
      get: "/animeapp/anime"
    };
  };

  rpc AnimeLike (AnimeLikeReq) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/animeapp/anime/like",
      body:"*",
    };
  }

  rpc AnimeUnLike (AnimeLikeReq) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/animeapp/anime/unlike",
      body:"*",
    };
  }
}

message AddCategoryReq {
  string name = 1 [(validate.rules).string.min_len = 1];
}

message CategoryListRes {
  repeated Category categoryList = 1;
  int64 count = 2;
}

message Category {
  int64 id = 1;
  string name = 2;
}

message AddAnimeReq {
  string name = 1 [(validate.rules).string.min_len = 1];
  string description = 2 [(validate.rules).string.min_len = 1];
  int32 year = 3 [(validate.rules).int32.gt = 1900];
  int32 quarter = 4 [(validate.rules).int32 = {gt: 0, lt: 12}];
  string firstPlayTime = 5;
  repeated int64 categoryId = 6 [(validate.rules).repeated.min_items = 1];
}

message AddVideoReq {
  int64 animeId = 1 [(validate.rules).int64.gt = 0];
  int32 episode = 2 [(validate.rules).int32.gt = 0];
  string name = 3 ;
  string url = 4 [(validate.rules).string.min_len = 1];
}

message GetAnimeListReq {
  int32 page = 1 [(validate.rules).int32.gt = 0];
  int32 pageSize = 2 [(validate.rules).int32 = {gte:4, lte: 20}];
  int64 categoryId = 3 [(validate.rules).int64.gt = 0];
  int32 sort = 4 [(validate.rules).int32.gt = 0];
}

message AnimeListRes {
  repeated AnimeRes animeinfo = 1;
}

message AnimeRes {
  int64 id = 1;
  string name = 2;
  string description = 3;
  string imageUrl = 4;
  int32 year = 5;
  int32 quarter = 6;
}

message AnimeInfoReq {
  int64 animeId = 1 [(validate.rules).int64.gt = 0];
}

message AnimeInfoRes {
  int64 id = 1;
  string name = 2;
  string description = 3;
  int32 year = 4;
  int32 quarter = 5;
  string firstPlayTime = 6;
  int32 likeCount = 7;
  int32 collectCount = 8;
  string updatedAt = 9;
  bool like = 10;
  bool collect = 11;
  repeated VideoInfo videoInfos = 12;
}

message VideoInfo {
  int64 id = 1;
  int32 episode = 2;
  string name = 3;
  string url = 4;
}

message AnimeLikeReq {
  int64 animeId = 1 [(validate.rules).int64.gt = 0];
  bool likeType = 2;
}
