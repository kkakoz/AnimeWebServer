// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/anime/anime.proto

package animepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _anime_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AddCategoryReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// AddCategoryReqValidationError is the validation error returned by
// AddCategoryReq.Validate if the designated constraints aren't met.
type AddCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCategoryReqValidationError) ErrorName() string { return "AddCategoryReqValidationError" }

// Error satisfies the builtin error interface
func (e AddCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCategoryReqValidationError{}

// Validate checks the field values on CategoryListRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CategoryListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCategoryList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListResValidationError{
					field:  fmt.Sprintf("CategoryList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	return nil
}

// CategoryListResValidationError is the validation error returned by
// CategoryListRes.Validate if the designated constraints aren't met.
type CategoryListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListResValidationError) ErrorName() string { return "CategoryListResValidationError" }

// Error satisfies the builtin error interface
func (e CategoryListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListResValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Category) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on AddAnimeReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddAnimeReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return AddAnimeReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return AddAnimeReqValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetYear() >= 1900 {
		return AddAnimeReqValidationError{
			field:  "Year",
			reason: "value must be less than 1900",
		}
	}

	if val := m.GetQuarter(); val <= 0 || val >= 12 {
		return AddAnimeReqValidationError{
			field:  "Quarter",
			reason: "value must be inside range (0, 12)",
		}
	}

	// no validation rules for FirstPlayTime

	if len(m.GetCategoryId()) < 1 {
		return AddAnimeReqValidationError{
			field:  "CategoryId",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// AddAnimeReqValidationError is the validation error returned by
// AddAnimeReq.Validate if the designated constraints aren't met.
type AddAnimeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAnimeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAnimeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAnimeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAnimeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAnimeReqValidationError) ErrorName() string { return "AddAnimeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddAnimeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAnimeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAnimeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAnimeReqValidationError{}

// Validate checks the field values on AddVideoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddVideoReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAnimeId() <= 0 {
		return AddVideoReqValidationError{
			field:  "AnimeId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetEpisode() <= 0 {
		return AddVideoReqValidationError{
			field:  "Episode",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return AddVideoReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		return AddVideoReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// AddVideoReqValidationError is the validation error returned by
// AddVideoReq.Validate if the designated constraints aren't met.
type AddVideoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVideoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVideoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVideoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVideoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVideoReqValidationError) ErrorName() string { return "AddVideoReqValidationError" }

// Error satisfies the builtin error interface
func (e AddVideoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVideoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVideoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVideoReqValidationError{}

// Validate checks the field values on GetAnimeListReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAnimeListReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPage() <= 0 {
		return GetAnimeListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if val := m.GetPageSize(); val < 4 || val > 20 {
		return GetAnimeListReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range [4, 20]",
		}
	}

	if m.GetCategoryId() <= 0 {
		return GetAnimeListReqValidationError{
			field:  "CategoryId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetSort() <= 0 {
		return GetAnimeListReqValidationError{
			field:  "Sort",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetAnimeListReqValidationError is the validation error returned by
// GetAnimeListReq.Validate if the designated constraints aren't met.
type GetAnimeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimeListReqValidationError) ErrorName() string { return "GetAnimeListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAnimeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimeListReqValidationError{}

// Validate checks the field values on AnimeListRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AnimeListRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAnimeinfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnimeListResValidationError{
					field:  fmt.Sprintf("Animeinfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AnimeListResValidationError is the validation error returned by
// AnimeListRes.Validate if the designated constraints aren't met.
type AnimeListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimeListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimeListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimeListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimeListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimeListResValidationError) ErrorName() string { return "AnimeListResValidationError" }

// Error satisfies the builtin error interface
func (e AnimeListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimeListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimeListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimeListResValidationError{}

// Validate checks the field values on AnimeRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AnimeRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	// no validation rules for Year

	// no validation rules for Quarter

	return nil
}

// AnimeResValidationError is the validation error returned by
// AnimeRes.Validate if the designated constraints aren't met.
type AnimeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimeResValidationError) ErrorName() string { return "AnimeResValidationError" }

// Error satisfies the builtin error interface
func (e AnimeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimeResValidationError{}

// Validate checks the field values on AnimeInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AnimeInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return AnimeInfoReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// AnimeInfoReqValidationError is the validation error returned by
// AnimeInfoReq.Validate if the designated constraints aren't met.
type AnimeInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimeInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimeInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimeInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimeInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimeInfoReqValidationError) ErrorName() string { return "AnimeInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e AnimeInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimeInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimeInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimeInfoReqValidationError{}

// Validate checks the field values on AnimeInfoRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AnimeInfoRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	// no validation rules for Year

	// no validation rules for Quarter

	// no validation rules for Hits

	// no validation rules for LikeCount

	// no validation rules for ViewCount

	// no validation rules for CollectCount

	for idx, item := range m.GetVideoInfos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnimeInfoResValidationError{
					field:  fmt.Sprintf("VideoInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AnimeInfoResValidationError is the validation error returned by
// AnimeInfoRes.Validate if the designated constraints aren't met.
type AnimeInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimeInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimeInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimeInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimeInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimeInfoResValidationError) ErrorName() string { return "AnimeInfoResValidationError" }

// Error satisfies the builtin error interface
func (e AnimeInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimeInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimeInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimeInfoResValidationError{}

// Validate checks the field values on VideoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VideoInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Episode

	// no validation rules for Name

	// no validation rules for Url

	return nil
}

// VideoInfoValidationError is the validation error returned by
// VideoInfo.Validate if the designated constraints aren't met.
type VideoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoInfoValidationError) ErrorName() string { return "VideoInfoValidationError" }

// Error satisfies the builtin error interface
func (e VideoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoInfoValidationError{}

// Validate checks the field values on AnimeLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AnimeLikeReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAnimeId() <= 0 {
		return AnimeLikeReqValidationError{
			field:  "AnimeId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for LikeType

	return nil
}

// AnimeLikeReqValidationError is the validation error returned by
// AnimeLikeReq.Validate if the designated constraints aren't met.
type AnimeLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimeLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimeLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimeLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimeLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimeLikeReqValidationError) ErrorName() string { return "AnimeLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e AnimeLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimeLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimeLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimeLikeReqValidationError{}
