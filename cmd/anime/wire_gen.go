// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"red-bean-anime-server/internal/app/anime/repo"
	"red-bean-anime-server/internal/app/anime/service"
	"red-bean-anime-server/internal/app/anime/usecase"
	"red-bean-anime-server/internal/pkg/client"
	"red-bean-anime-server/pkg/app"
	"red-bean-anime-server/pkg/auth"
	"red-bean-anime-server/pkg/config"
	"red-bean-anime-server/pkg/db/etcd"
	"red-bean-anime-server/pkg/db/mysqlx"
	"red-bean-anime-server/pkg/kafkax"
	"red-bean-anime-server/pkg/log"
)

// Injectors from wire.go:

func NewApp(ctx context.Context, confpath string) (*app.App, error) {
	viper, err := config.NewConfig(confpath)
	if err != nil {
		return nil, err
	}
	logger, err := log.NewLog(viper)
	if err != nil {
		return nil, err
	}
	clientv3Client, err := etcd.NewEtcd(viper)
	if err != nil {
		return nil, err
	}
	db, err := mysqlx.New(viper)
	if err != nil {
		return nil, err
	}
	iCategoryRepo := repo.NewCategoryRepo()
	iCategoryUsecase := usecase.NewCategoryUsecase(db, iCategoryRepo)
	iAnimeRepo := repo.NewAnimeRepo()
	countServiceClient, err := client.NewCountClient(ctx, clientv3Client)
	if err != nil {
		return nil, err
	}
	syncProducer, err := kafkax.NewSyncProducer(viper)
	if err != nil {
		return nil, err
	}
	jwtTokenVerifier, err := auth.NewJwtTokenVerifier(viper)
	if err != nil {
		return nil, err
	}
	iAnimeUsecase := usecase.NewAnimeUsecase(db, iAnimeRepo, iCategoryRepo, countServiceClient, syncProducer, jwtTokenVerifier)
	registerService := service.NewAnimeService(iCategoryUsecase, iAnimeUsecase)
	grpcServer := app.NewGrpcServer(ctx, clientv3Client, registerService)
	appApp, err := app.NewApp(viper, logger, grpcServer)
	if err != nil {
		return nil, err
	}
	return appApp, nil
}
